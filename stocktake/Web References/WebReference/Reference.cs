//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.42000 版自动生成。
// 
#pragma warning disable 1591

namespace stocktake.WebReference {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1532.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="WebServiceSoap", Namespace="http://tempuri.org/")]
    public partial class WebService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback getmssqldtOperationCompleted;
        
        private System.Threading.SendOrPostCallback exemssqlOperationCompleted;
        
        private System.Threading.SendOrPostCallback getmysqldtOperationCompleted;
        
        private System.Threading.SendOrPostCallback exemysqlOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetERPImgOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpInventoryOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public WebService() {
            this.Url = global::stocktake.Properties.Settings.Default.stocktake_WebReference_WebService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event getmssqldtCompletedEventHandler getmssqldtCompleted;
        
        /// <remarks/>
        public event exemssqlCompletedEventHandler exemssqlCompleted;
        
        /// <remarks/>
        public event getmysqldtCompletedEventHandler getmysqldtCompleted;
        
        /// <remarks/>
        public event exemysqlCompletedEventHandler exemysqlCompleted;
        
        /// <remarks/>
        public event GetERPImgCompletedEventHandler GetERPImgCompleted;
        
        /// <remarks/>
        public event UpInventoryCompletedEventHandler UpInventoryCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getmssqldt", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool getmssqldt(string strsql, out System.Data.DataTable dt, out string remsg) {
            object[] results = this.Invoke("getmssqldt", new object[] {
                        strsql});
            dt = ((System.Data.DataTable)(results[1]));
            remsg = ((string)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void getmssqldtAsync(string strsql) {
            this.getmssqldtAsync(strsql, null);
        }
        
        /// <remarks/>
        public void getmssqldtAsync(string strsql, object userState) {
            if ((this.getmssqldtOperationCompleted == null)) {
                this.getmssqldtOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetmssqldtOperationCompleted);
            }
            this.InvokeAsync("getmssqldt", new object[] {
                        strsql}, this.getmssqldtOperationCompleted, userState);
        }
        
        private void OngetmssqldtOperationCompleted(object arg) {
            if ((this.getmssqldtCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getmssqldtCompleted(this, new getmssqldtCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/exemssql", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool exemssql(string strsql, out string msg) {
            object[] results = this.Invoke("exemssql", new object[] {
                        strsql});
            msg = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void exemssqlAsync(string strsql) {
            this.exemssqlAsync(strsql, null);
        }
        
        /// <remarks/>
        public void exemssqlAsync(string strsql, object userState) {
            if ((this.exemssqlOperationCompleted == null)) {
                this.exemssqlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnexemssqlOperationCompleted);
            }
            this.InvokeAsync("exemssql", new object[] {
                        strsql}, this.exemssqlOperationCompleted, userState);
        }
        
        private void OnexemssqlOperationCompleted(object arg) {
            if ((this.exemssqlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.exemssqlCompleted(this, new exemssqlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getmysqldt", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool getmysqldt(string strsql, out System.Data.DataTable dt, out string remsg) {
            object[] results = this.Invoke("getmysqldt", new object[] {
                        strsql});
            dt = ((System.Data.DataTable)(results[1]));
            remsg = ((string)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void getmysqldtAsync(string strsql) {
            this.getmysqldtAsync(strsql, null);
        }
        
        /// <remarks/>
        public void getmysqldtAsync(string strsql, object userState) {
            if ((this.getmysqldtOperationCompleted == null)) {
                this.getmysqldtOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetmysqldtOperationCompleted);
            }
            this.InvokeAsync("getmysqldt", new object[] {
                        strsql}, this.getmysqldtOperationCompleted, userState);
        }
        
        private void OngetmysqldtOperationCompleted(object arg) {
            if ((this.getmysqldtCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getmysqldtCompleted(this, new getmysqldtCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/exemysql", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool exemysql(string strsql, out string msg) {
            object[] results = this.Invoke("exemysql", new object[] {
                        strsql});
            msg = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void exemysqlAsync(string strsql) {
            this.exemysqlAsync(strsql, null);
        }
        
        /// <remarks/>
        public void exemysqlAsync(string strsql, object userState) {
            if ((this.exemysqlOperationCompleted == null)) {
                this.exemysqlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnexemysqlOperationCompleted);
            }
            this.InvokeAsync("exemysql", new object[] {
                        strsql}, this.exemysqlOperationCompleted, userState);
        }
        
        private void OnexemysqlOperationCompleted(object arg) {
            if ((this.exemysqlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.exemysqlCompleted(this, new exemysqlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetERPImg", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetERPImg(string item_code, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] out byte[] img, out string msg) {
            object[] results = this.Invoke("GetERPImg", new object[] {
                        item_code});
            img = ((byte[])(results[1]));
            msg = ((string)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetERPImgAsync(string item_code) {
            this.GetERPImgAsync(item_code, null);
        }
        
        /// <remarks/>
        public void GetERPImgAsync(string item_code, object userState) {
            if ((this.GetERPImgOperationCompleted == null)) {
                this.GetERPImgOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetERPImgOperationCompleted);
            }
            this.InvokeAsync("GetERPImg", new object[] {
                        item_code}, this.GetERPImgOperationCompleted, userState);
        }
        
        private void OnGetERPImgOperationCompleted(object arg) {
            if ((this.GetERPImgCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetERPImgCompleted(this, new GetERPImgCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpInventory", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpInventory(string InventoryNo, string ShopCode, string userid, System.Data.DataTable inventoryDetaildt, out string remsg) {
            object[] results = this.Invoke("UpInventory", new object[] {
                        InventoryNo,
                        ShopCode,
                        userid,
                        inventoryDetaildt});
            remsg = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpInventoryAsync(string InventoryNo, string ShopCode, string userid, System.Data.DataTable inventoryDetaildt) {
            this.UpInventoryAsync(InventoryNo, ShopCode, userid, inventoryDetaildt, null);
        }
        
        /// <remarks/>
        public void UpInventoryAsync(string InventoryNo, string ShopCode, string userid, System.Data.DataTable inventoryDetaildt, object userState) {
            if ((this.UpInventoryOperationCompleted == null)) {
                this.UpInventoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpInventoryOperationCompleted);
            }
            this.InvokeAsync("UpInventory", new object[] {
                        InventoryNo,
                        ShopCode,
                        userid,
                        inventoryDetaildt}, this.UpInventoryOperationCompleted, userState);
        }
        
        private void OnUpInventoryOperationCompleted(object arg) {
            if ((this.UpInventoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpInventoryCompleted(this, new UpInventoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1532.0")]
    public delegate void getmssqldtCompletedEventHandler(object sender, getmssqldtCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1532.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getmssqldtCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getmssqldtCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public System.Data.DataTable dt {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string remsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1532.0")]
    public delegate void exemssqlCompletedEventHandler(object sender, exemssqlCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1532.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class exemssqlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal exemssqlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string msg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1532.0")]
    public delegate void getmysqldtCompletedEventHandler(object sender, getmysqldtCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1532.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getmysqldtCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getmysqldtCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public System.Data.DataTable dt {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string remsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1532.0")]
    public delegate void exemysqlCompletedEventHandler(object sender, exemysqlCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1532.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class exemysqlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal exemysqlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string msg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1532.0")]
    public delegate void GetERPImgCompletedEventHandler(object sender, GetERPImgCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1532.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetERPImgCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetERPImgCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public byte[] img {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string msg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1532.0")]
    public delegate void UpInventoryCompletedEventHandler(object sender, UpInventoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1532.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpInventoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpInventoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string remsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
}

#pragma warning restore 1591